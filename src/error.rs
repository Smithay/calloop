use std::fmt::{self, Debug, Formatter};

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("invalid token provided to internal function")]
    InvalidToken,

    #[error("underlying IO error")]
    IoError(#[from] std::io::Error),

    #[error("error generated by event callback")]
    CallbackError(#[from] Box<dyn std::error::Error + Sync + Send>),
}

impl From<nix::errno::Errno> for Error {
    fn from(err: nix::errno::Errno) -> Self {
        Into::<std::io::Error>::into(err).into()
    }
}

impl From<Error> for std::io::Error {
    fn from(err: Error) -> Self {
        match err {
            Error::IoError(source) => Self::new(source.kind(), source),
            Error::InvalidToken => Self::new(std::io::ErrorKind::InvalidInput, err),
            Error::CallbackError(src) => Self::new(std::io::ErrorKind::Other, src),
        }
    }
}

pub type Result<T> = core::result::Result<T, Error>;

#[derive(thiserror::Error, Debug)]
#[error("non-thread-safe error generated by event callback")]
pub struct CallbackErrorNonSync<E: std::error::Error + 'static>(#[from] E);

impl<E: std::error::Error> From<CallbackErrorNonSync<E>> for Error {
    fn from(error: CallbackErrorNonSync<E>) -> Self {
        Self::CallbackError(error.0.to_string().into())
    }
}

/// An error generated when trying to insert an event source
#[derive(thiserror::Error)]
#[error("error inserting event source")]
pub struct InsertError<T> {
    /// The source that could not be inserted
    pub inserted: T,
    /// The generated error
    #[source]
    pub error: Error,
}

#[cfg(not(tarpaulin_include))]
impl<E> Debug for InsertError<E> {
    fn fmt(&self, formatter: &mut Formatter) -> core::result::Result<(), fmt::Error> {
        write!(formatter, "{:?}", self.error)
    }
}

#[cfg(not(tarpaulin_include))]
impl<E> From<InsertError<E>> for crate::Error {
    fn from(e: InsertError<E>) -> crate::Error {
        e.error
    }
}
