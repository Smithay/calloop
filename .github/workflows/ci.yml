name: Continuous Integration

on:
  push:
    branches:
    - master
  pull_request:

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Get date for registry cache
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Cargo registry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.date.outputs.date }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Get cargo-cache latest version
        id: cargocacheversion
        run: echo "::set-output name=version::$(cargo search 'cargo-cache' --limit 1 | head -n 1 | cut -d ' ' -f 3 | cut -d '"' -f 2)"

      - name: Cargo binaries cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/cargo-cache
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-cargo-binaries-${{ steps.cargocacheversion.outputs.version }}

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-cache --version ${{ steps.cargocacheversion.outputs.version }}

      - name: Clean cargo cache of old items
        uses: actions-rs/cargo@v1
        with:
          command: cache
          args: clean-unref

      - name: Get rustc version for caching
        id: rustcversion
        run: echo "::set-output name=version::$(rustc --version | cut -d ' ' -f 2)"

      - name: Build cache
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-lint-${{ steps.rustcversion.outputs.version }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings

  ci-linux:
    name: CI

    needs:
      - lint

    strategy:
      fail-fast: false
      matrix:
        rust: ['1.53.0', 'stable', 'beta']

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Get date for registry cache
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Cargo registry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.date.outputs.date }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Get rustc version for caching
        id: rustcversion
        run: echo "::set-output name=version::$(rustc --version | cut -d ' ' -f 2)"

      - name: Build cache
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-test-${{ steps.rustcversion.outputs.version }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

  coverage:
    name: Coverage

    needs:
      - ci-linux

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']

    runs-on: ${{ matrix.os }}

    env:
      GRCOV_VERSION: "0.8.10"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Get date for registry cache
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Cargo registry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.date.outputs.date }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly # required for feature(no_coverage)
          override: true
          components: llvm-tools-preview # Required for grcov
      
      - name: Get grcov latest version
        id: grcovversion
        run: echo "::set-output name=version::$(cargo search 'grcov' --limit 1 | head -n 1 | cut -d ' ' -f 3 | cut -d '"' -f 2)"
      
      - name: grcov cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/grcov
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-grcov-${{ steps.grcovversion.outputs.version }}

      - name: Install grcov
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov --version ${{ steps.grcovversion.outputs.version }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features
        env:
          LLVM_PROFILE_FILE: "calloop-%p-%m.profraw"
          RUSTFLAGS: "-Cinstrument-coverage --cfg coverage"

      - name: Coverage
        run: grcov . --binary-path ./target/debug -s . -t lcov --branch --llvm --ignore-not-existing --ignore 'examples/*' --ignore 'tests/*' --ignore '*/.cargo/registry/*' --excl-br-start "mod tests \{" --excl-start "mod tests \{" --excl-br-line "#\[derive\(" --excl-line "#\[derive\(" -o lcov.info
    
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: ./lcov.info
          flags: ${{ matrix.os }}

  doc:
    name: Documentation on Github Pages
    runs-on: ubuntu-latest

    needs:
      - ci-linux

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Get date for registry cache
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Cargo registry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ steps.date.outputs.date }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          override: true

      # Combining these docs is order-dependent. The API docs must be copied
      # into mdBook's source directory for it to copy it to the output directory
      # as static content.

      - name: Build Documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features

      - run: rsync -r target/doc/ doc/src/api

      - name: Build mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.4.8'

      - run: mdbook build doc

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.event_name == 'push' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc/book
